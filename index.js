#!/usr/bin/env node

import { Command } from "commander";
import chalk from "chalk";
import { interactiveMode } from "./src/interactive.js";
import { createComponent } from "./src/creator.js";

const program = new Command();

program
  .name("create-react-component")
  .description("üöÄ CLI poderosa para gerar componentes React com suporte a CSS, Styled Components, Emotion, Zustand stores, Context API e testes")
  .version("1.0.0")
  .helpOption('-h, --help', 'mostrar informa√ß√µes de ajuda');

program
  .argument("[nome]", "Nome do componente (opcional no modo interativo)")
  .option("-t, --ts", "Gerar componente em TypeScript", false)
  .option("-s, --styled", "Gerar arquivo de styled components", false)
  .option("-e, --emotion", "Gerar arquivo de emotion styled", false)
  .option("-p, --path <caminho>", "Caminho onde criar o componente (padr√£o: diret√≥rio atual)", ".")
  .option("-i, --interactive", "Modo interativo com perguntas", false)
  .option("--test", "Gerar arquivo de teste", false)
  .option("-z, --zustand", "Gerar store Zustand", false)
  .option("-c, --context", "Gerar Context API", false)
  .addHelpText('before', `
${chalk.cyan('‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó')}
${chalk.cyan('‚ïë')}  ${chalk.bold.white('üé® CLI React Components Generator')}                           ${chalk.cyan('‚ïë')}
${chalk.cyan('‚ïë')}  ${chalk.gray('Ferramenta para criar componentes React rapidamente')}         ${chalk.cyan('‚ïë')}
${chalk.cyan('‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù')}
`)
  .addHelpText('after', `
${chalk.yellow('üí° EXEMPLOS DE USO:')}
  ${chalk.green('$')} ${chalk.white('create-react-component --interactive')}            ${chalk.gray('# üéØ Modo interativo com perguntas')}
  ${chalk.green('$')} ${chalk.white('create-react-component -i')}                       ${chalk.gray('# üéØ Modo interativo (alias)')}
  ${chalk.green('$')} ${chalk.white('create-react-component Button')}                    ${chalk.gray('# üìÑ Componente b√°sico na raiz')}
  ${chalk.green('$')} ${chalk.white('create-react-component Modal --ts')}                ${chalk.gray('# üî∑ Componente TypeScript')}
  ${chalk.green('$')} ${chalk.white('create-react-component Header --styled')}           ${chalk.gray('# üíÖ Componente com Styled Components')}
  ${chalk.green('$')} ${chalk.white('create-react-component Sidebar --emotion')}         ${chalk.gray('# üòä Componente com Emotion')}
  ${chalk.green('$')} ${chalk.white('create-react-component Card --path ./src')}         ${chalk.gray('# üìÅ Criar em pasta espec√≠fica')}
  ${chalk.green('$')} ${chalk.white('create-react-component Nav -p ./src/components')}   ${chalk.gray('# üìÅ Usar alias -p')}
  ${chalk.green('$')} ${chalk.white('create-react-component Form --ts --test --path ./src/forms')} ${chalk.gray('# üöÄ Completo com caminho')}
  ${chalk.green('$')} ${chalk.white('create-react-component UserStore --zustand --ts')}         ${chalk.gray('# üè™ Componente com Zustand store')}
  ${chalk.green('$')} ${chalk.white('create-react-component AuthContext --context --ts')}       ${chalk.gray('# üéØ Componente com Context API')}
  ${chalk.green('$')} ${chalk.white('create-react-component Dashboard -z -c --ts')}             ${chalk.gray('# üî• Componente com Zustand e Context')}

${chalk.yellow('üìÅ ESTRUTURAS DE CAMINHO:')}
  ${chalk.blue('Sem --path:')}       ${chalk.white('./NomeComponente/')} ${chalk.gray('(na raiz do projeto)')}
  ${chalk.blue('--path ./src:')}     ${chalk.white('./src/NomeComponente/')} ${chalk.gray('(dentro de src)')}
  ${chalk.blue('--path ./components:')} ${chalk.white('./components/NomeComponente/')} ${chalk.gray('(dentro de components)')}
  ${chalk.blue('Caminhos relativos:')} ${chalk.gray('Sempre relativos ao diret√≥rio atual')}

${chalk.yellow('üìÅ ESTRUTURAS GERADAS:')}
  ${chalk.blue('B√°sico:')}           ${chalk.white('NomeComponente/')} ${chalk.gray('NomeComponente.jsx + NomeComponente.css + index.js')}
  ${chalk.blue('--styled:')}         ${chalk.white('NomeComponente/')} ${chalk.gray('NomeComponente.jsx + styled.js + index.js')}
  ${chalk.blue('--emotion:')}        ${chalk.white('NomeComponente/')} ${chalk.gray('NomeComponente.jsx + styles.js + index.js')}
  ${chalk.blue('--test:')}           ${chalk.gray('Adiciona')} ${chalk.white('NomeComponente.test.jsx')} ${chalk.gray('com testes b√°sicos')}
  ${chalk.blue('--ts:')}             ${chalk.gray('Usa extens√µes')} ${chalk.white('.tsx/.ts')} ${chalk.gray('em vez de')} ${chalk.white('.jsx/.js')}
  ${chalk.blue('--zustand:')}        ${chalk.gray('Adiciona')} ${chalk.white('store.js/ts')} ${chalk.gray('com Zustand store')}
  ${chalk.blue('--context:')}        ${chalk.gray('Adiciona')} ${chalk.white('context.js/ts')} ${chalk.gray('com Context API')}

${chalk.yellow('‚ö†Ô∏è  NOTAS IMPORTANTES:')}
  ${chalk.red('‚Ä¢')} N√£o √© poss√≠vel usar ${chalk.white('--styled')} e ${chalk.white('--emotion')} juntos
  ${chalk.green('‚Ä¢')} Cada componente √© criado em sua pr√≥pria pasta
  ${chalk.green('‚Ä¢')} Arquivo ${chalk.white('index.js/ts')} √© sempre criado para facilitar importa√ß√µes
  ${chalk.green('‚Ä¢')} Caminhos s√£o criados automaticamente se n√£o existirem
  ${chalk.green('‚Ä¢')} TypeScript (${chalk.white('--ts')}) funciona com todas as outras op√ß√µes
  ${chalk.green('‚Ä¢')} Zustand (${chalk.white('--zustand')}) cria store com actions pr√©-definidas
  ${chalk.green('‚Ä¢')} Context API (${chalk.white('--context')}) cria provider, hook e actions
  ${chalk.cyan('‚Ä¢')} Modo interativo (${chalk.white('--interactive')}) guia voc√™ atrav√©s de todas as op√ß√µes

${chalk.cyan('üîó Para mais informa√ß√µes, visite:')} ${chalk.underline('https://github.com/thiagonmiziara/cli-react')}
`)
  .action(async (nome, options) => {
    let componentOptions;
    
    // Se modo interativo ou n√£o h√° nome fornecido
    if (options.interactive || !nome) {
      componentOptions = await interactiveMode();
    } else {
      // Modo tradicional via flags
      // Verificar se o nome foi fornecido
      if (!nome || nome.trim() === '') {
        console.log(chalk.red.bold("‚ùå ERRO:"), chalk.red("Nome do componente √© obrigat√≥rio"));
        console.log(chalk.gray("üí° Use"), chalk.cyan("'create-react-component --help'"), chalk.gray("para ver todas as op√ß√µes"));
        console.log(chalk.gray("üí° Ou use"), chalk.cyan("'create-react-component --interactive'"), chalk.gray("para modo interativo"));
        return;
      }
      
      componentOptions = {
        nome: nome.trim(),
        ts: options.ts,
        styled: options.styled,
        emotion: options.emotion,
        path: options.path,
        test: options.test,
        zustand: options.zustand,
        context: options.context
      };
    }

    // Agora criar o componente com as op√ß√µes escolhidas
    await createComponent(componentOptions);
  });

program.parse();