#!/usr/bin/env node

import { Command } from "commander";
import chalk from "chalk";
import { interactiveMode } from "./src/interactive.js";
import { createComponent } from "./src/creator.js";
import { createProject } from "./src/project-creator.js";

const program = new Command();

program
  .name("create-react-component")
  .description("üöÄ CLI poderosa para gerar componentes React com suporte a CSS, Styled Components, Emotion, Zustand stores, Context API e testes")
  .version("1.1.0")
  .helpOption('-h, --help', 'mostrar informa√ß√µes de ajuda');

program
  .argument("[nome]", "Nome do componente (opcional no modo interativo)")
  .option("-t, --ts", "Gerar componente em TypeScript", false)
  .option("-s, --styled", "Gerar arquivo de styled components", false)
  .option("-e, --emotion", "Gerar arquivo de emotion styled", false)
  .option("-p, --path <caminho>", "Caminho onde criar o componente (padr√£o: diret√≥rio atual)", ".")
  .option("-i, --interactive", "Modo interativo com perguntas", false)
  .option("--test", "Gerar arquivo de teste", false)
  .option("-z, --zustand", "Gerar store Zustand", false)
  .option("-c, --context", "Gerar Context API", false)
  .option("--project", "Criar projeto React + Vite completo", false)
  .addHelpText('before', `
${chalk.cyan('‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó')}
${chalk.cyan('‚ïë')}  ${chalk.bold.white('üé® CLI React Components Generator')}                           ${chalk.cyan('‚ïë')}
${chalk.cyan('‚ïë')}  ${chalk.gray('Ferramenta para criar componentes React rapidamente')}         ${chalk.cyan('‚ïë')}
${chalk.cyan('‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù')}
`)
  .addHelpText('after', `
${chalk.yellow('üí° EXEMPLOS DE USO:')}
  ${chalk.green('$')} ${chalk.white('create-react-component --interactive')}            ${chalk.gray('# üéØ Modo interativo com perguntas')}
  ${chalk.green('$')} ${chalk.white('create-react-component --project')}                ${chalk.gray('# üöÄ Criar projeto React + Vite completo')}
  ${chalk.green('$')} ${chalk.white('create-react-component -i')}                       ${chalk.gray('# üéØ Modo interativo (alias)')}
  ${chalk.green('$')} ${chalk.white('create-react-component Button')}                    ${chalk.gray('# üìÑ Componente b√°sico na raiz')}
  ${chalk.green('$')} ${chalk.white('create-react-component Modal --ts')}                ${chalk.gray('# üî∑ Componente TypeScript')}
  ${chalk.green('$')} ${chalk.white('create-react-component Header --styled')}           ${chalk.gray('# üíÖ Componente com Styled Components')}
  ${chalk.green('$')} ${chalk.white('create-react-component Sidebar --emotion')}         ${chalk.gray('# üòä Componente com Emotion')}
  ${chalk.green('$')} ${chalk.white('create-react-component Card --path ./src')}         ${chalk.gray('# üìÅ Criar em pasta espec√≠fica')}
  ${chalk.green('$')} ${chalk.white('create-react-component UserStore --zustand --ts')}         ${chalk.gray('# üè™ Componente com Zustand store')}
  ${chalk.green('$')} ${chalk.white('create-react-component AuthContext --context --ts')}       ${chalk.gray('# üéØ Componente com Context API')}

${chalk.yellow('ÔøΩ CRIAR PROJETO COMPLETO:')}
  ${chalk.blue('--project')}  ${chalk.gray('Cria um projeto React + Vite com:')}
    ${chalk.gray('‚Ä¢ Vite configurado')}
    ${chalk.gray('‚Ä¢ shadcn/ui (opcional) com componentes pr√©-instalados')}
    ${chalk.gray('‚Ä¢ Tailwind CSS configurado')}
    ${chalk.gray('‚Ä¢ Estrutura de pastas organizada')}
    ${chalk.gray('‚Ä¢ Pacotes adicionais (React Router, Zustand, Axios, etc)')}
    ${chalk.gray('‚Ä¢ Git inicializado (opcional)')}

${chalk.cyan('üîó Para mais informa√ß√µes, visite:')} ${chalk.underline('https://github.com/thiagonmiziara/cli-react')}
`)
  .action(async (nome, options) => {
    let componentOptions;
    
    // Se modo projeto - vai direto para cria√ß√£o de projeto
    if (options.project) {
      const { projectMode } = await import('./src/interactive.js');
      componentOptions = await projectMode();
      await createProject(componentOptions);
      return;
    }
    
    // Se modo interativo ou n√£o h√° nome fornecido
    if (options.interactive || !nome) {
      componentOptions = await interactiveMode();
      
      // Se escolheu criar projeto
      if (componentOptions.fileType === 'project') {
        await createProject(componentOptions);
        return;
      }
    } else {
      // Modo tradicional via flags
      // Verificar se o nome foi fornecido
      if (!nome || nome.trim() === '') {
        console.log(chalk.red.bold("‚ùå ERRO:"), chalk.red("Nome do componente √© obrigat√≥rio"));
        console.log(chalk.gray("üí° Use"), chalk.cyan("'create-react-component --help'"), chalk.gray("para ver todas as op√ß√µes"));
        console.log(chalk.gray("üí° Ou use"), chalk.cyan("'create-react-component --interactive'"), chalk.gray("para modo interativo"));
        return;
      }
      
      componentOptions = {
        nome: nome.trim(),
        ts: options.ts,
        styled: options.styled,
        emotion: options.emotion,
        path: options.path,
        test: options.test,
        zustand: options.zustand,
        context: options.context
      };
    }

    // Criar o componente com as op√ß√µes escolhidas
    await createComponent(componentOptions);
  });

program.parse();